package wizcompiler

import (
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/fasterthanlime/wizardry/wizardry/wizparser"
	"github.com/go-errors/errors"
)

type indentCallback func()

// Compile generates go code from a spellbook
func Compile(book wizparser.Spellbook) error {
	wd, err := os.Getwd()
	if err != nil {
		return errors.Wrap(err, 0)
	}

	fullPath := filepath.Join(wd, "wizardry", "wizbook", "book.go")

	f, err := os.Create(fullPath)
	if err != nil {
		return errors.Wrap(err, 0)
	}

	fmt.Println("Generating into:", fullPath)

	defer f.Close()

	lf := []byte("\n")
	oneIndent := []byte("  ")
	indentLevel := 0

	indent := func() {
		indentLevel++
	}

	outdent := func() {
		indentLevel--
	}

	withIndent := func(f indentCallback) {
		indent()
		f()
		outdent()
	}

	emit := func(format string, args ...interface{}) {
		if format != "" {
			for i := 0; i < indentLevel; i++ {
				f.Write(oneIndent)
			}
			fmt.Fprintf(f, format, args...)
		}
		f.Write(lf)
	}

	emit("// this file has been generated by github.com/fasterthanlime/wizardry")
	emit("// from a set of magic rules. you probably don't want to edit it by hand")
	emit("")

	emit("package wizbook")
	emit("")
	emit("import (")
	withIndent(func() {
		emit(strconv.Quote("encoding/binary"))
		emit(strconv.Quote("github.com/fasterthanlime/wizardry/wizardry"))
	})
	emit(")")
	emit("")

	emit("// silence import errors, if we don't use string/search etc.")
	emit("var _ wizardry.StringTestFlags")

	emit("var le binary.ByteOrder = binary.LittleEndian")
	emit("var be binary.ByteOrder = binary.BigEndian")
	emit("")

	for _, byteWidth := range []byte{1, 2, 4, 8} {
		for _, endianness := range []wizparser.Endianness{wizparser.LittleEndian, wizparser.BigEndian} {
			retType := fmt.Sprintf("uint%d", byteWidth*8)

			emit("func readUint%d%s(tb []byte, off int64) (%s, bool) {", byteWidth*8, endiannessString(endianness, false), retType)
			withIndent(func() {
				emit("if int64(len(tb)) < off+%d {", byteWidth)
				withIndent(func() {
					emit("return 0, false")
				})
				emit("}")

				if byteWidth == 1 {
					emit("pi := %s(tb[off])", retType)
				} else {
					emit("pi := %s.Uint%d(tb[off:])", endiannessString(endianness, false), byteWidth*8)
				}
				emit("return pi, true")
			})
			emit("}")
			emit("")
		}
	}

	currentLevel := 0

	for _, swapEndian := range []bool{false, true} {
		for page := range book {
			rules := book[page]

			emit("func Identify%s(tb []byte, pageOff int64) ([]string, error) {", pageSymbol(page, swapEndian))
			withIndent(func() {
				emit("var out []string")
				emit("var off int64") // lookupOffset

				maxLevel := 0
				for _, rule := range rules {
					if rule.Level > maxLevel && len(rule.Description) > 0 {
						maxLevel = rule.Level
					}
				}
				for i := 0; i <= maxLevel; i++ {
					emit("m%d := false", i)
				}
				emit("")

				ruleIndex := 0

				for {
					if ruleIndex >= len(rules) {
						break
					}

					rule := rules[ruleIndex]

					for currentLevel < rule.Level {
						emit("if m%d {", currentLevel)
						currentLevel++
						indent()
					}

					for currentLevel > rule.Level {
						currentLevel--
						outdent()
						emit("}")
					}

					emit("// %s", rule)

					switch rule.Offset.OffsetType {
					case wizparser.OffsetTypeDirect:
						emit("off = pageOff + %d", rule.Offset.Direct)
					case wizparser.OffsetTypeIndirect:
						emit("// uh oh indirect offset")
					}

					switch rule.Kind.Family {
					case wizparser.KindFamilyInteger:
						ik, _ := rule.Kind.Data.(*wizparser.IntegerKind)

						emit("{")
						withIndent(func() {
							emit("iv, ok := readUint%d%s(tb, %s)",
								ik.ByteWidth*8,
								endiannessString(ik.Endianness, swapEndian),
								"off",
							)

							lhs := "iv"

							operator := "=="
							switch ik.IntegerTest {
							case wizparser.IntegerTestEqual:
								operator = "=="
							case wizparser.IntegerTestNotEqual:
								operator = "!="
							case wizparser.IntegerTestLessThan:
								operator = "<"
							case wizparser.IntegerTestGreaterThan:
								operator = ">"
							}

							if ik.IntegerTest == wizparser.IntegerTestGreaterThan || ik.IntegerTest == wizparser.IntegerTestLessThan {
								lhs = fmt.Sprintf("int64(int%d(iv))", ik.ByteWidth*8)
							} else {
								lhs = fmt.Sprintf("uint64(iv)")
							}

							ruleTest := fmt.Sprintf("ok && (%s %s %s)", lhs, operator, quoteNumber(ik.Value))
							emit("m%d = %s", rule.Level, ruleTest)
						})
						emit("}")

					default:
						emit("// uh oh unhandled kind")
					}

					if len(rule.Description) > 0 {
						emit("if m%d {", rule.Level)
						withIndent(func() {
							emit("out = append(out, %s)", strconv.Quote(string(rule.Description)))
						})
						emit("}")
					}

					emit("")

					ruleIndex++
				}

				for currentLevel > 0 {
					currentLevel--
					outdent()
					emit("}")
				}

				emit("return out, nil")
			})
			emit("}")
			emit("")
		}

	}
	return nil
}

func pageSymbol(page string, swapEndian bool) string {
	result := ""
	for _, token := range strings.Split(page, "-") {
		result += strings.Title(token)
	}

	if swapEndian {
		result += "__Swapped"
	}

	return result
}

func endiannessString(en wizparser.Endianness, swapEndian bool) string {
	if en.MaybeSwapped(swapEndian) == wizparser.BigEndian {
		return "le"
	}
	return "be"
}

func quoteNumber(number int64) string {
	if number < 0 {
		return fmt.Sprintf("%d", number)
	}
	return fmt.Sprintf("0x%x", number)
}
