package wizcompiler

import (
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/fasterthanlime/wizardry/wizardry/wizparser"
	"github.com/go-errors/errors"
)

type indentCallback func()

type ruleNode struct {
	id       int64
	rule     wizparser.Rule
	children []*ruleNode
}

type nodeEmitter func(node *ruleNode, parent *ruleNode)

// Compile generates go code from a spellbook
func Compile(book wizparser.Spellbook) error {
	startTime := time.Now()

	wd, err := os.Getwd()
	if err != nil {
		return errors.Wrap(err, 0)
	}

	fullPath := filepath.Join(wd, "wizardry", "wizbook", "book.go")

	f, err := os.Create(fullPath)
	if err != nil {
		return errors.Wrap(err, 0)
	}

	fmt.Println("Generating into:", fullPath)

	defer f.Close()

	lf := []byte("\n")
	oneIndent := []byte("  ")
	indentLevel := 0

	indent := func() {
		indentLevel++
	}

	outdent := func() {
		indentLevel--
	}

	emit := func(format string, args ...interface{}) {
		if format != "" {
			for i := 0; i < indentLevel; i++ {
				f.Write(oneIndent)
			}
			fmt.Fprintf(f, format, args...)
		}
		f.Write(lf)
	}

	emitLabel := func(label string) {
		// labels have one less indent than usual
		for i := 1; i < indentLevel; i++ {
			f.Write(oneIndent)
		}
		f.Write([]byte(label))
		f.WriteString(":")
		f.Write(lf)
	}

	withIndent := func(f indentCallback) {
		indent()
		f()
		outdent()
	}

	withScope := func(f indentCallback) {
		emit("{")
		withIndent(f)
		emit("}")
	}

	emit("// this file has been generated by github.com/fasterthanlime/wizardry")
	emit("// from a set of magic rules. you probably don't want to edit it by hand")
	emit("")

	emit("package wizbook")
	emit("")
	emit("import (")
	withIndent(func() {
		emit(strconv.Quote("fmt"))
		emit(strconv.Quote("encoding/binary"))
		emit(strconv.Quote("github.com/fasterthanlime/wizardry/wizardry"))
	})
	emit(")")
	emit("")

	emit("// silence import errors, if we don't use string/search etc.")
	emit("var _ wizardry.StringTestFlags")
	emit("var _ fmt.State")

	emit("var le binary.ByteOrder = binary.LittleEndian")
	emit("var be binary.ByteOrder = binary.BigEndian")
	for _, byteWidth := range []byte{1, 2, 4, 8} {
		emit("type i%d int%d", byteWidth*8, byteWidth*8)
		emit("type u%d uint%d", byteWidth*8, byteWidth*8)
	}
	emit("")

	for _, byteWidth := range []byte{1, 2, 4, 8} {
		for _, endianness := range []wizparser.Endianness{wizparser.LittleEndian, wizparser.BigEndian} {
			retType := fmt.Sprintf("u%d", byteWidth*8)

			emit("func readU%d%s(tb []byte, off i64) (%s, bool) {", byteWidth*8, endiannessString(endianness, false), retType)
			withIndent(func() {
				emit("if i64(len(tb)) < off+%d {", byteWidth)
				withIndent(func() {
					emit("return 0, false")
				})
				emit("}")

				if byteWidth == 1 {
					emit("pi := %s(tb[off])", retType)
				} else {
					emit("pi := %s.Uint%d(tb[off:])", endiannessString(endianness, false), byteWidth*8)
				}
				emit("return %s(pi), true", retType)
			})
			emit("}")
			emit("")
		}
	}

	var pages []string
	for page := range book {
		pages = append(pages, page)
	}
	sort.Strings(pages)

	for _, page := range pages {
		nodes := treeify(book[page])

		for _, swapEndian := range []bool{false, true} {
			emit("func Identify%s(tb []byte, pageOff i64) ([]string, error) {", pageSymbol(page, swapEndian))
			withIndent(func() {
				emit("var out []string")
				emit("var gof i64") // globalOffset
				emit("gof &= gof")
				emit("var off i64") // lookupOffset
				emit("")

				var emitNode nodeEmitter

				emitNode = func(node *ruleNode, parentNode *ruleNode) {
					rule := node.rule

					canFail := false

					emit("// %s", rule.Line)

					switch rule.Offset.OffsetType {
					case wizparser.OffsetTypeDirect:
						if rule.Offset.IsRelative {
							emit("off = pageOff + gof + %s", quoteNumber(rule.Offset.Direct))
						} else {
							emit("off = pageOff + %s", quoteNumber(rule.Offset.Direct))
						}
					case wizparser.OffsetTypeIndirect:
						withScope(func() {
							indirect := rule.Offset.Indirect

							offsetAddress := quoteNumber(indirect.OffsetAddress)
							if indirect.IsRelative {
								offsetAddress = fmt.Sprintf("(gof + %s)", offsetAddress)
							}

							emit("ra, ok := readU%d%s(tb, %s)",
								indirect.ByteWidth*8,
								endiannessString(indirect.Endianness, swapEndian),
								offsetAddress)
							canFail = true
							emit("if !ok { goto %s }", failLabel(node))
							offsetAdjustValue := quoteNumber(indirect.OffsetAdjustmentValue)

							if indirect.OffsetAdjustmentIsRelative {
								offsetAdjustAddress := fmt.Sprintf("%s + %s", offsetAddress, quoteNumber(indirect.OffsetAdjustmentValue))
								emit("rb, ok := readU%d%s(tb, %s)",
									indirect.ByteWidth*8,
									endiannessString(indirect.Endianness, swapEndian),
									offsetAdjustAddress)
								emit("if !ok { goto %s }", failLabel(node))
								offsetAdjustValue = "i64(rb)"
							}

							emit("off = i64(ra)")

							switch indirect.OffsetAdjustmentType {
							case wizparser.AdjustmentAdd:
								emit("off = off + %s", offsetAdjustValue)
							case wizparser.AdjustmentDiv:
								emit("off = off / %s", offsetAdjustValue)
							case wizparser.AdjustmentMul:
								emit("off = off * %s", offsetAdjustValue)
							case wizparser.AdjustmentSub:
								emit("off = off * %s", quoteNumber(indirect.OffsetAdjustmentValue))
							}

							if rule.Offset.IsRelative {
								emit("off += gof")
							}
						})
					}

					switch rule.Kind.Family {
					case wizparser.KindFamilyInteger:
						ik, _ := rule.Kind.Data.(*wizparser.IntegerKind)

						if !ik.MatchAny {
							withScope(func() {
								emit("iv, ok := readU%d%s(tb, %s)",
									ik.ByteWidth*8,
									endiannessString(ik.Endianness, swapEndian),
									"off",
								)

								lhs := "iv"

								operator := "=="
								switch ik.IntegerTest {
								case wizparser.IntegerTestEqual:
									operator = "=="
								case wizparser.IntegerTestNotEqual:
									operator = "!="
								case wizparser.IntegerTestLessThan:
									operator = "<"
								case wizparser.IntegerTestGreaterThan:
									operator = ">"
								}

								if ik.IntegerTest == wizparser.IntegerTestGreaterThan || ik.IntegerTest == wizparser.IntegerTestLessThan {
									lhs = fmt.Sprintf("i64(i%d(iv))", ik.ByteWidth*8)
								} else {
									lhs = fmt.Sprintf("u64(iv)")
								}

								if ik.DoAnd {
									lhs = fmt.Sprintf("%s&%s", lhs, quoteNumber(int64(ik.AndValue)))
								}

								switch ik.AdjustmentType {
								case wizparser.AdjustmentAdd:
									lhs = fmt.Sprintf("(%s+%s)", lhs, quoteNumber(ik.AdjustmentValue))
								case wizparser.AdjustmentSub:
									lhs = fmt.Sprintf("(%s-%s)", lhs, quoteNumber(ik.AdjustmentValue))
								case wizparser.AdjustmentMul:
									lhs = fmt.Sprintf("(%s*%s)", lhs, quoteNumber(ik.AdjustmentValue))
								case wizparser.AdjustmentDiv:
									lhs = fmt.Sprintf("(%s/%s)", lhs, quoteNumber(ik.AdjustmentValue))
								}

								rhs := quoteNumber(ik.Value)

								ruleTest := fmt.Sprintf("ok && (%s %s %s)", lhs, operator, rhs)
								canFail = true
								emit("if !(%s) { goto %s }", ruleTest, failLabel(node))
							})
						}
						emit("gof = off + %d", ik.ByteWidth)
					case wizparser.KindFamilyString:
						sk, _ := rule.Kind.Data.(*wizparser.StringKind)
						withScope(func() {
							emit("ml := i64(wizardry.StringTest(tb, int(off), %#v, %#v))", sk.Value, sk.Flags)
							canFail = true
							if sk.Negate {
								emit("if ml >= 0 { goto %s }", failLabel(node))
							} else {
								emit("if ml < 0 { goto %s }", failLabel(node))
							}
							emit("gof = off + ml")
						})

					case wizparser.KindFamilySearch:
						withScope(func() {
							sk, _ := rule.Kind.Data.(*wizparser.SearchKind)
							emit("ml := i64(wizardry.SearchTest(tb, int(off), %s, %s))", quoteNumber(int64(sk.MaxLen)), strconv.Quote(string(sk.Value)))
							canFail = true
							emit("if ml < 0 { goto %s }", failLabel(node))
							emit("gof = off + ml + %s", quoteNumber(int64(len(sk.Value))))
						})

					case wizparser.KindFamilyUse:
						uk, _ := rule.Kind.Data.(*wizparser.UseKind)
						withScope(func() {
							emit("ss, _ := Identify%s(tb, off)", pageSymbol(uk.Page, uk.SwapEndian))
							emit("out = append(out, ss...)")
						})

					case wizparser.KindFamilyName:
						// do nothing, pretty much

					default:
						emit("// uh oh unhandled kind %s", rule.Kind)
						canFail = true
						emit("goto %s", failLabel(node))
					}

					emit("fmt.Printf(\"matched rule: %%s\\n\", %s)", strconv.Quote(rule.Line))
					if len(rule.Description) > 0 {
						emit("out = append(out, %s)", strconv.Quote(string(rule.Description)))
					}

					if len(node.children) > 0 {
						for _, child := range node.children {
							emitNode(child, node)
						}
					}

					if len(node.children) > 0 {
						emitLabel(succeedLabel(node))
					}
					if parentNode == nil {
						emit("goto end")
					} else {
						emit("goto %s", succeedLabel(parentNode))
					}
					if canFail {
						emitLabel(failLabel(node))
					}
				}

				for _, node := range nodes {
					emitNode(node, nil)
				}

				emitLabel("end")
				emit("return out, nil")
			})
			emit("}")
			emit("")
		}

	}

	fmt.Printf("Compiled in %s\n", time.Since(startTime))

	return nil
}

func pageSymbol(page string, swapEndian bool) string {
	result := ""
	for _, token := range strings.Split(page, "-") {
		result += strings.Title(token)
	}

	if swapEndian {
		result += "__Swapped"
	}

	return result
}

func endiannessString(en wizparser.Endianness, swapEndian bool) string {
	if en.MaybeSwapped(swapEndian) == wizparser.BigEndian {
		return "be"
	}
	return "le"
}

func quoteNumber(number int64) string {
	if number < 0 {
		return fmt.Sprintf("%d", number)
	}
	return fmt.Sprintf("0x%x", number)
}

func treeify(rules []wizparser.Rule) []*ruleNode {
	var rootNodes []*ruleNode
	var nodeStack []*ruleNode
	var idSeed int64

	for _, rule := range rules {
		node := &ruleNode{
			id:   idSeed,
			rule: rule,
		}
		idSeed++

		if rule.Level > 0 {
			parent := nodeStack[rule.Level-1]
			parent.children = append(parent.children, node)
		} else {
			rootNodes = append(rootNodes, node)
		}

		nodeStack = append(nodeStack[0:rule.Level], node)
	}

	return rootNodes
}

func failLabel(node *ruleNode) string {
	return fmt.Sprintf("f%d", node.id)
}

func succeedLabel(node *ruleNode) string {
	return fmt.Sprintf("s%d", node.id)
}
